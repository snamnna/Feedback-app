generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  TEACHER
  ADMIN // can assign roles to users
}

enum FeedbackType {
  BAD
  NEUTRAL
  GREAT
}

enum EnrollmentStatus {
  REJECTED
  PENDING
  APPROVED
}

model User {
  id              Int                @id @default(autoincrement())
  username        String             @unique
  password_hash   String
  userType        UserType           @default(STUDENT) // the type of user (student, lecturer, admin)
  lecturedCourses Course[] // courses that the user is a lecturer of
  enrolledCourses CourseEnrollment[] // courses that the user is enrolled in
  feedback        Feedback[] // feedback that the user has given
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([username])
}

model Course {
  id          Int                @id @default(autoincrement())
  name        String             @db.VarChar(160)
  description String?            @db.VarChar(255)
  lecturer    User               @relation(fields: [lecturerId], references: [id])
  lecturerId  Int
  lectures    Lecture[] // lectures in the course
  enrollments CourseEnrollment[] // students enrolled in the course

  @@index([name])
}

model CourseEnrollment {
  userId   Int
  courseId Int
  user     User             @relation(fields: [userId], references: [id])
  course   Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  status   EnrollmentStatus @default(PENDING)

  @@id([userId, courseId])
  @@index([userId, courseId])
}

model Lecture {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(160)
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  feedback  Feedback[]
  createdAt DateTime   @default(now())
}

model Feedback {
  id           Int          @id @default(autoincrement())
  feedbackType FeedbackType
  comment      String?      @db.VarChar(160)
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  lecture      Lecture      @relation(fields: [lectureId], references: [id])
  lectureId    Int
  createdAt    DateTime     @default(now())

  @@unique([userId, lectureId])
}
